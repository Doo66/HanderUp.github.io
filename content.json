{"meta":{"title":"HanderUp's Blog","subtitle":null,"description":null,"author":"HanderUp","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"Android Studio 中 build.gradle文件详解","date":"2017-03-20T03:35:15.517Z","updated":"2017-03-20T03:49:22.668Z","comments":true,"path":"2017/03/20/Android Studio 中 build.gradle文件详解/","link":"","permalink":"http://yoursite.com/2017/03/20/Android Studio 中 build.gradle文件详解/","excerpt":"","text":"Android Studio 中 build.gradle文件详解 标签（）： Android基础 Android 项目中有两个 build.gradle 文件， 一个是在最外层目录下的， 一个是在 app 目录下的。 这两个文件对构建 Android Studio 项目都起了至关重要的作用，下面我们对这两个文件分别进行分析。 一、先来分析最外层目录下的 build.gradle 文件， 代码如下所示：1234567891011121314buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.3.0' &#125;&#125;allprojects &#123; repositories &#123; jcenter() &#125;&#125; 该文件中包含两个 repositories 两个闭包， 并且都声明了 jcenter() 这行配置， jcenter 是一个代码托管仓库， 通过声明了这行配置之后， 我们就可以在项目中轻松引用任何 jcenter 上的开源项目了。 其次， dependencies 闭包中使用 classpath 声明了一个 Gradle 插件， Gradle 插件并不是专门为构建 Android 项目而开发的， Java，C++ 等很多种项目都可以使用 Gradle 来构建。因此我们使用它来构建 Android 项目，则需要声明 com.android.tools.build:gradle:2.3.0 这个插件。 2.3.0 为 Gradle 插件的版本号。 二、下面我们再来看一下 app 目录下的 build.gradle 文件， 代码如下所示：1234567891011121314151617181920212223242526apply plugin: &apos;com.android.application&apos;android &#123; compileSdkVersion 23 buildToolsVersion &apos;25.0.0&apos; defaultConfig &#123; applicationId &quot;com.example.administrator.myfirstapp&quot; minSdkVersion 19 targetSdkVersion 23 versionCode 1 versionName &quot;1.0&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) compile &apos;com.android.support:appcompat-v7:23.4.0&apos; compile &apos;com.android.support.constraint:constraint-layout:1.0.0-beta4&apos; testCompile &apos;junit:junit:4.12&apos;&#125; 1. apply plugin：应用插件一般有两种值可选： com.android.application ：表示这是一个应用程序模块com.android.library ：表示这是一个库模块 应用程序模块和库模块的最大区别在于，一个是可以直接运行，一个只能作为代码库依附于别的应用程序模块运行。 2. android 闭包：用来配置项目构建的各种属性 compileSdkVersion ：用于指定项目的编译版本buildToolsVersion ：用于指定项目构建工具的版本 2.1. defaultConfig 闭包：对项目的更多细节进行配置 applicationId：用于指定项目的包名minSdkVersion：用于指定项目最低兼容的 Android 系统版本targetSdkVersion：指定的值表示你在该版本上已经做过了充分的测试，系统将会为你的应用程序启用一些最新的功能和特征versionCode：用于指定项目的版本号versionName：用于指定项目的版本名 2.2 buildTypes 子闭包：用于指定生成安装文件的相关配置通常只会有两个子闭包（debug闭包是可以忽略不写的，因此我们看到上面的代码中就只有一个 release 闭包）。 debug：测试版安装文件的配置release：正式版安装文件的配置爱 minifyEnabled：用于指定是否对项目的代码进行混淆， true 表示混淆， false 表示不混淆proguardFiles：用于指定混淆时使用的规则文件 proguardFiles：中的文件12proguad-android.txt：是在 Android SDK 目录下的，里面是所有项目通用的混淆规则proguard-rules.pro：是在当前项目的根目录下的，里面可以编写当前项目特有的混淆规则 3. dependencies 闭包：指定当前项目所有的依赖关系 Android Studio 项目一共有3中依赖关系：本地依赖 库依赖 远程依赖本地依赖：可以对本地的 Jar 包或目录添加依赖关系库依赖：可以对项目中的库模块添加依赖关系远程依赖：可以对 jcenter 库上的开源项目添加依赖关系 compile fileTree：本地依赖声明compile：远程依赖声明compile project：库依赖","categories":[],"tags":[]}]}