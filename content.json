{"meta":{"title":"HanderUp's Blog","subtitle":null,"description":"coding","author":"HanderUp","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"Intent 初级","date":"2017-05-19T09:49:05.263Z","updated":"2017-05-19T09:48:59.024Z","comments":true,"path":"2017/05/19/Intent 初级/","link":"","permalink":"http://yoursite.com/2017/05/19/Intent 初级/","excerpt":"","text":"Intent 初级标签（空格分隔）： Android基础 Intent 作为 Android 中意图，可以通过 action 和 category 两个主要的标签指定想要启动的组件。Intent 分为 显式 和 隐式 。 1. 显式 Intent 启动另一个 Activity ，并传递数据在程序代码中注册，并且只能启动本应用中的其他组件，不能跨应用启动组件。 可以通过 Intent 传递参数给另一个 Activity使用 Intent 启动一个 SendActivity :123456789EditText meditText;public final static String EXTRA_MESSAGE = \"com.example.firstapp.MESSAGE\";public void StartSendActivity(View view) &#123; Intent intent = new Intent(this,SendActivity.class); String message = meditText.getText().toString(); intent.putExtra(EXTRA_MESSAGE,message); startActivity(intent);&#125; 使用 Intent 接收传递的参数：1234567TextView mtextView;private void setText() &#123; Intent intent = getIntent(); String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE); mtextView.setText(message);&#125; 2. 隐式 Intent在 Android 中隐式启动 Intent 的方式最常见，因为隐式 Intent 可以跨应用启动不同组件，包括系统提供的组件和自己编写的应用中的组件都可以被启动。 隐式 Intent 可以在 AndroidManifest.xml 和 代码 中注册 主要定义 action 和 category 标签1. 使用系统提供的 Intent常用的系统 Intent action：action代表已经定义的动作，通过 setAction()方法或在 AndroidManifest.xml 中设置 系统 Intent 对应字符串 功能 ACTION_VIEW android.intent.action.VIEW 显示指定数据/播放音乐 ACTION_DIAL android.intent.action.DIAL 打开拨号面板 ACTION_CALL android.intent.action.CALL 向指定号码打电话 ACTION_MAIN android.intent.action.MAIN 应用程序入口 ACTION_EDIT android.intent.action.EDIT 编辑指定数据 ACTION_SENDTO android.intent.action.SENDTO 发送消息 ACTION_DELETE android.intent.action.DELETE 删除数据/卸载应用 ACTION_INSERT android.intent.action.INSERT 插入数据/安装应用 同时还需要设置 category 标签：category 标签用于指定 action 被执行的环境，通过 addCategory()方法或在 AndroidManifest.xml 中设置 具体使用如下：1. 在 AndroidManifest.xml 中注册1234567&lt;activity android:name=\".SendActivity\" android:label=\"SendActivity\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.VIEW\"/&gt; &lt;category android:name=\"android.intent.category.DEFAULT\"/&gt; &lt;data android:scheme=\"http\"/&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 2. 在代码中注册启动拨号面板示例：12345public void callPhone(View view) &#123; Intent intent = new Intent(Intent.ACTION_DIAL); intent.setData(Uri.parse(\"tel:13369100203\")); startActivity(intent);&#125; 3. 使用 Intent 返回数据给上一个 Activity首先在 FirstActivity 中使用 startActivityForResult() 方法启动 SendActivity , 代码如下：1234public void playMusice(View view) &#123; Intent intent = new Intent(\"com.example.intenttest.ACTION_START\"); startActivityForResult(intent, 1);&#125; 然后在 SendActivity 中设置按钮的点击事件，使用 Intent 传递数据 ， 也可以重写返回键的 onBackPressed() 方法 ， 代码如下：1234567@Overridepublic void onBackPressed() &#123; Intent intent = new Intent(); intent.putExtra(\"data_return\", \"I'm layoutActivity\"); setResult(RESULT_OK, intent); finish();&#125; 在 FirstActivity 中重写 onActivityResult() 方法，用来接收 SendActivity 传递的数据，代码如下：12345678910@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; switch (requestCode) &#123; case 1: if (resultCode == RESULT_OK) &#123; String returnData = data.getStringExtra(\"data_return\"); Toast.makeText(this, returnData, Toast.LENGTH_SHORT).show(); &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"","slug":"Android Studio 中 build.gradle文件详解","date":"2017-03-20T03:35:15.517Z","updated":"2017-03-20T04:17:37.614Z","comments":true,"path":"2017/03/20/Android Studio 中 build.gradle文件详解/","link":"","permalink":"http://yoursite.com/2017/03/20/Android Studio 中 build.gradle文件详解/","excerpt":"","text":"Android Studio 中 build.gradle文件详解 Tags: Android基础 Android 项目中有两个 build.gradle 文件， 一个是在最外层目录下的， 一个是在 app 目录下的。 这两个文件对构建 Android Studio 项目都起了至关重要的作用，下面我们对这两个文件分别进行分析。 一、先来分析最外层目录下的 build.gradle 文件， 代码如下所示：1234567891011121314buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.3.0' &#125;&#125;allprojects &#123; repositories &#123; jcenter() &#125;&#125; 该文件中包含两个 repositories 两个闭包， 并且都声明了 jcenter() 这行配置， jcenter 是一个代码托管仓库， 通过声明了这行配置之后， 我们就可以在项目中轻松引用任何 jcenter 上的开源项目了。 其次， dependencies 闭包中使用 classpath 声明了一个 Gradle 插件， Gradle 插件并不是专门为构建 Android 项目而开发的， Java，C++ 等很多种项目都可以使用 Gradle 来构建。因此我们使用它来构建 Android 项目，则需要声明 com.android.tools.build:gradle:2.3.0 这个插件。 2.3.0 为 Gradle 插件的版本号。 二、下面我们再来看一下 app 目录下的 build.gradle 文件， 代码如下所示：1234567891011121314151617181920212223242526apply plugin: 'com.android.application'android &#123; compileSdkVersion 23 buildToolsVersion '25.0.0' defaultConfig &#123; applicationId \"com.example.administrator.myfirstapp\" minSdkVersion 19 targetSdkVersion 23 versionCode 1 versionName \"1.0\" &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' &#125; &#125;&#125;dependencies &#123; compile fileTree(dir: 'libs', include: ['*.jar']) compile 'com.android.support:appcompat-v7:23.4.0' compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4' testCompile 'junit:junit:4.12'&#125; 1. apply plugin：应用插件一般有两种值可选： com.android.application ：表示这是一个应用程序模块com.android.library ：表示这是一个库模块 应用程序模块和库模块的最大区别在于，一个是可以直接运行，一个只能作为代码库依附于别的应用程序模块运行。 2. android 闭包：用来配置项目构建的各种属性 compileSdkVersion ：用于指定项目的编译版本buildToolsVersion ：用于指定项目构建工具的版本 2.1 defaultConfig 子闭包：对项目的更多细节进行配置 applicationId：用于指定项目的包名minSdkVersion：用于指定项目最低兼容的 Android 系统版本targetSdkVersion：指定的值表示你在该版本上已经做过了充分的测试，系统将会为你的应用程序启用一些最新的功能和特征versionCode：用于指定项目的版本号versionName：用于指定项目的版本名 2.2 buildTypes 子闭包：用于指定生成安装文件的相关配置通常只会有两个子闭包（debug闭包是可以忽略不写的，因此我们看到上面的代码中就只有一个 release 闭包）。 debug：测试版安装文件的配置release：正式版安装文件的配置爱 minifyEnabled：用于指定是否对项目的代码进行混淆， true 表示混淆， false 表示不混淆proguardFiles：用于指定混淆时使用的规则文件 proguardFiles：中的文件proguad-android.txt：是在 Android SDK 目录下的，里面是所有项目通用的混淆规则proguard-rules.pro：是在当前项目的根目录下的，里面可以编写当前项目特有的混淆规则 3. dependencies 闭包：指定当前项目所有的依赖关系Android Studio 项目一共有3中依赖关系：本地依赖 库依赖 远程依赖本地依赖：可以对本地的 Jar 包或目录添加依赖关系库依赖：可以对项目中的库模块添加依赖关系远程依赖：可以对 jcenter 库上的开源项目添加依赖关系 compile fileTree：本地依赖声明compile：远程依赖声明compile project：库依赖","categories":[],"tags":[]}]}