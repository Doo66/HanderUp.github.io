<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HanderUp&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-19T12:04:55.569Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HanderUp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/%E5%90%AF%E5%8A%A8%E5%90%8C%E4%B8%80%E5%BA%94%E7%94%A8%E4%B8%AD%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8F%A6%E4%B8%80%E4%B8%AA%20Activity/"/>
    <id>http://yoursite.com/2017/05/19/启动同一应用中带返回值的另一个 Activity/</id>
    <published>2017-05-19T12:05:16.549Z</published>
    <updated>2017-05-19T12:04:55.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动同一应用中带返回值的另一个-Activity"><a href="#启动同一应用中带返回值的另一个-Activity" class="headerlink" title="启动同一应用中带返回值的另一个 Activity"></a>启动同一应用中带返回值的另一个 Activity</h1><p>标签（空格分隔）： Activity启动模式</p>
<hr>
<p>通常在启动 <strong>带返回值的 Activity</strong> 时，我们使用 <code>StartActivityForResult()</code> 方法，然后通过 <code>Intent</code> 传递意图和数据，但是对于在同一应用中的 <strong>子 <code>Activity</code></strong> 要调用 <strong>父 <code>Acitivity</code></strong> 并返回数据给 <strong>父 <code>Activity</code></strong> 时，可利用 <strong><code>Activity</code> 的启动模式和 <code>Intent</code> 的Flag</strong> 来实现数据的传递。</p>
<p><strong>注意：</strong> <code>StartActivityForResult()</code> 的方式更适合不同应用之间通信。</p>
<h2 id="具体应用场景中如下图"><a href="#具体应用场景中如下图" class="headerlink" title="具体应用场景中如下图"></a>具体应用场景中如下图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/HanderUp/SaveImg/4ffe12271217053455cf49c7d23ae08f618a6fc4/task.png" alt="task" title="">
                </div>
                <div class="image-caption">task</div>
            </figure>
<p>在任务栈中，我们启动了 MainActivity 、Activity A 、SecondActivity 、Activity B ，现在需要在 SecondActivity 中启动 MainActivity ，并返回数据给 MainActivity ，具体做法如下：</p>
<p><strong>1. 在 AndroidManifest 文件中将 MainActivity 的 launchMode 属性设置为 SingleTop</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=<span class="string">".MainActivity"</span></div><div class="line">           android:launchMode=<span class="string">"singleTop"</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>2. 在 SecondActivity 中启动 MainActivity ，并传递数据</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class="line">        intent.putExtra(<span class="string">"second_data"</span>, <span class="string">"Hello MainActivity"</span>);</div><div class="line">        startActivity(intent);</div></pre></td></tr></table></figure>
<p><strong>3. 在 MainActivity 中接收数据</strong></p>
<p>接收数据具体为重写 <code>onNewIntent()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onNewIntent(intent);</div><div class="line">    String  str = intent.getStringExtra(<span class="string">"second_data"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>具体过程分析：</strong><br>SecondActivity 启动 MainActivity 时，给 Intent 设置 <code>FLAG_ACTIVITY_CLEAR_TOP</code> Flag，<code>FLAG_ACTIVITY_CLEAR_TOP</code> 的具体用法为：启动目标 Activity 时，目标 Activity 的 <strong>launchMode</strong> 属性为默认，或者设置为 <code>standard</code> 时，目标 Activity 会和目标 Activity 之上的所有 Activity 一起被销毁，然后创建目标 Activity 的新实例，这里我们将目标 Activity 的 <strong>launchMode</strong> 设置为 <code>singleTop</code> 就能保证当前的目标 Activity 实例不被销毁，同时使用 <code>onNewIntent()</code> 接收传递的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动同一应用中带返回值的另一个-Activity&quot;&gt;&lt;a href=&quot;#启动同一应用中带返回值的另一个-Activity&quot; class=&quot;headerlink&quot; title=&quot;启动同一应用中带返回值的另一个 Activity&quot;&gt;&lt;/a&gt;启动同一应用中带返回值的另一
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/Fragment%20%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/19/Fragment 初步学习总结/</id>
    <published>2017-05-19T12:05:16.546Z</published>
    <updated>2017-05-19T12:04:43.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fragment-初步学习总结"><a href="#Fragment-初步学习总结" class="headerlink" title="Fragment 初步学习总结"></a>Fragment 初步学习总结</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p><strong>Fragment</strong> 在 Android 3.0 开始引入，主要用来解决兼容平板的问题，只开发一个应用解决平板和手机上的不同布局，合理利用屏幕空间。</p>
<h2 id="一、-Fragment-的两种加载模式"><a href="#一、-Fragment-的两种加载模式" class="headerlink" title="一、 Fragment 的两种加载模式"></a>一、 Fragment 的两种加载模式</h2><h3 id="1、静态加载模式"><a href="#1、静态加载模式" class="headerlink" title="1、静态加载模式"></a>1、静态加载模式</h3><p>(1) 首先创建一个 <code>left_fragment.xml</code> ，用来展示 <strong>Fragment</strong> 的布局。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button 1"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>(2) 然后创建一个 <code>LeftFragment.java</code> 类，用来处理 <strong>Fragment</strong> 中的逻辑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeftFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    </div><div class="line">    View view = inflater.inflate(R.layout.left_fragment, container, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(3) 最后在 <code>activity.xml</code> 中加入 <code>&lt;fragment&gt;</code> 标签。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;fragment</div><div class="line">    android:id=<span class="string">"@+id/left_fragment"</span></div><div class="line">    android:name=<span class="string">"com.example.fragmenttest.LeftFragment"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="2、动态加载模式"><a href="#2、动态加载模式" class="headerlink" title="2、动态加载模式"></a>2、动态加载模式</h3><p>对于动态加载 <strong>Fragment</strong> ，采用 <code>&lt;FramLayout&gt;</code> 布局来动态加载不同的 <code>&lt;fragment&gt;</code> 布局，具体如下：</p>
<p>(1)创建两个 <strong>fragment</strong> 布局，分别为 <code>right_fragment.xml</code> 和 <code>another_right_fragment.xml</code></p>
<p><strong>right_fragment.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#00ff00"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"This is RightFragment"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>another_right_fragment.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#ffff00"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"This is anotherFragment"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>(2)创建 <code>RightFragment.java</code> 类和 <code>AnotherRightFragment.java</code> 类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.right_fragment, container, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherRightFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.another_right_fragment, container, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(3)为了在平板中加载不同的 <code>activity_main.xml</code> 文件，我们需要在重新创建一个文件件用来专门存放加载平板的 <code>activity_main.xml</code>文件，具体为在 <strong>res</strong> 文件夹下新建 <strong>layout-large</strong> 文件夹，在 <strong>layout-large</strong> 下创建 <strong>activity_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/left_fragment"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.example.fragmenttest.LeftFragment"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/right_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"3"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>(4)在 <strong>MainActivity.java</strong> 类中处理动态加载的逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity 实现 OnClickListener 接口</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.button1:</div><div class="line">            replaceFragment(<span class="keyword">new</span> RightFragment());</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.button2:</div><div class="line">            replaceFragment(<span class="keyword">new</span> AnotherRightFragment());</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceFragment</span><span class="params">(Fragment fragment)</span> </span>&#123;</div><div class="line">    FragmentManager fragmentManager = getFragmentManager();</div><div class="line">    FragmentTransaction transaction = fragmentManager.beginTransaction();</div><div class="line">    transaction.replace(R.id.right_layout, fragment);</div><div class="line">    transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">    transaction.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中使用到了 <strong>FragmentManager</strong> 和 <strong>FragmentTransaction</strong> 类 </p>
<ol>
<li>在 Android 3.0 之后使用 <strong>getFragmentManager()</strong> 获得<strong>FragmentManager</strong> 对象</li>
<li><strong>FragmentTransaction</strong> 用来处理 <strong>Fragment</strong> 的动态加载事务，包含 <code>show()</code> 、 <code>hide()</code> 、<code>add()</code> 、 <code>replace()</code> 、<code>remove()</code> 、 <code>commit()</code> 等方法。</li>
<li><code>addToBackStack()</code> 模拟返回栈，按 <strong>Back</strong> 键不会直接退出当前 <strong>Activity</strong>，而是返回上一 <strong>Fragment</strong> 。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Fragment-初步学习总结&quot;&gt;&lt;a href=&quot;#Fragment-初步学习总结&quot; class=&quot;headerlink&quot; title=&quot;Fragment 初步学习总结&quot;&gt;&lt;/a&gt;Fragment 初步学习总结&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： Android基
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/Broadcast%20%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/05/19/Broadcast 初步学习/</id>
    <published>2017-05-19T12:05:16.542Z</published>
    <updated>2017-05-19T12:04:36.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Broadcast-初步学习"><a href="#Broadcast-初步学习" class="headerlink" title="Broadcast 初步学习"></a>Broadcast 初步学习</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p><strong>Broadcast 的分类</strong><br><strong>1.</strong> 普通广播（异步方式，同一时刻所有接收者都有可能接收到广播）<br><strong>2.</strong> 有序广播（按照顺序接收广播，优先级高的接收者先接收，并且可以截 断广播，优先级低的接收者就不能接收到广播）</p>
<p><strong>Broadcast 的注册方式</strong><br><strong>1.</strong> 静态注册（在 AndroidManifest.xml 文件中注册）<br><strong>2.</strong> 动态注册（在代码中注册，必须取消注册才行）</p>
<p><strong>在程序内可以接收系统的广播，同时 Broadcast 可以跨应用传递，如果只定义在本应用内使用，可以使用 <code>本地广播</code></strong><br><strong>广播的传递通过 Intent</strong></p>
<h2 id="发送和接收自定义广播"><a href="#发送和接收自定义广播" class="headerlink" title="发送和接收自定义广播"></a>发送和接收自定义广播</h2><p>###1. 普通广播<br><strong>静态注册方式</strong></p>
<p>首先，创建一个 MyBroadcastReceiver 类继承 BroadcastReceiver，这个类是广播接收者，用于事件处理，重写 <code>onReceive()</code>方法即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context, <span class="string">"自定义普通广播静态注册"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，在 <strong>AndroidManifest.xml</strong> 文件中注册广播<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span> /&gt;</span>                    </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最后，在需要发送广播的地方发送相应的广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span>);</div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure></p>
<p><strong>动态注册方式</strong><br>动态注册广播使用的是内部类的方式</p>
<p>首先，创建内部类 MyBroadcastReceiver 继承 BroadcastReceiver<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context, <span class="string">"自定义普通广播动态注册"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，在注册广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">MyBroadcastReceiver receiver;    </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    IntentFilter intentFilter=<span class="keyword">new</span> IntentFilter(<span class="string">"com.example.testbroadcast.SEND_BROADCAST"</span>);</div><div class="line">    receiver = <span class="keyword">new</span> MyBroadcastReceiver();</div><div class="line">    <span class="comment">// 注册广播</span></div><div class="line">    registerReceiver(receiver,intentFilter);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并且不能忘记取消注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    <span class="comment">// 取消注册</span></div><div class="line">    unregisterReceiver(receiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发送广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.testbroadcast.SEND_BROADCAST"</span>);    </div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure></p>
<p>###2. 有序广播<br><strong>注意事项：</strong><br>有序广播需要给广播接收者设置优先级，在动态方式中通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intentFilter.setPriority(<span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<p>在静态方式中通过 <code>intent-filter</code> 标签的属性 <code>priority</code> 来设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>有序广播的截断</strong><br>在优先级高的广播接收者中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abortBroadcast();</div></pre></td></tr></table></figure></p>
<p>###3. 本地广播<br>本地广播和普通广播还有有序广播的区别在于，使用了 <code>LocalBroadcastManager</code> 来管理接收者，使用内部类的方式</p>
<p><strong>注册接收者</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> MyBroadcastReceiver receiver;</div><div class="line"><span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">        intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.example.broadcasttest.SEND_BROADCAST"</span>);</div><div class="line">        receiver = <span class="keyword">new</span> LocalBroadcastReceiver();</div><div class="line">        localBroadcastManager.registerReceiver(receiver, intentFilter);</div></pre></td></tr></table></figure></p>
<p><strong>取消注册</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    localBroadcastManager.unregisterReceiver(localBroadcastReceiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>发送广播</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</div><div class="line">localBroadcastManager.sendBroadcast(intent);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Broadcast-初步学习&quot;&gt;&lt;a href=&quot;#Broadcast-初步学习&quot; class=&quot;headerlink&quot; title=&quot;Broadcast 初步学习&quot;&gt;&lt;/a&gt;Broadcast 初步学习&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： Android基础&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/Android%20%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2017/05/19/Android 数据持久化/</id>
    <published>2017-05-19T12:05:16.539Z</published>
    <updated>2017-05-19T12:04:30.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-数据持久化"><a href="#Android-数据持久化" class="headerlink" title="Android 数据持久化"></a>Android 数据持久化</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p><strong>Android 数据持久化分类：</strong></p>
<ol>
<li>SharedPerfences 存储</li>
<li>文件存储</li>
<li>SQLite 数据库存储</li>
</ol>
<p>以上不同方式的数据持久化方案根据应用场景的不同，各有优缺点，以下对不同类别的存储方式进行对比：</p>
<h2 id="1-SharedPerfences-存储"><a href="#1-SharedPerfences-存储" class="headerlink" title="1. SharedPerfences 存储"></a>1. SharedPerfences 存储</h2><p>SharedPerfences 存储是 Android 中最常见的存储方式，快捷方便，以键值对的方式存储为 <code>xml</code> 格式的文件</p>
<p><strong>SharedPerfences 存储数据的三大步骤：</strong><br>① 获得一个 SharedPerfences 对象（有三种方式）</p>
<ul>
<li><p>Context 类中的 getSharedPreferences() 方法 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数1：存储数据的文件名，文件被存储在 /data/data/&lt;packagename&gt;/shared_prefs/ 目录下</span></div><div class="line"><span class="comment">// 参数2：用于指定操作模式</span></div><div class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE);</div></pre></td></tr></table></figure>
</li>
<li><p>Activity 类中的 getPreferences() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只接收一个操作模式参数，使用当前 Activity 的类名作为文件名</span></div><div class="line">SharedPreferences sp = getPreferences(MODE_PRIVATE);</div></pre></td></tr></table></figure>
</li>
<li><p>PreferenceManager 类中的 getSharedPreferenes() 方法（静态方法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接收一个 Context 参数，使用当前应用程序的包名作为文件名</span></div><div class="line"> SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>② 调用 SharedPreferences 对象的 edit() 方法获取一个 SharedPreferences.Editor 对象。<br>③ 向 SharedPreferences.Editor 对象中添加数据，通过调用 getXXX() 方法。<br>④ 调用 Editor 对象的 commit() 方法，完成数据存储操作。</p>
<h3 id="存数据"><a href="#存数据" class="headerlink" title="存数据"></a>存数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    SharedPreferences.Editor editor = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE).edit();</div><div class="line">    editor.putString(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</div><div class="line">    editor.putInt(<span class="string">"age"</span>, <span class="number">20</span>);</div><div class="line">    editor.putBoolean(<span class="string">"married"</span>, <span class="keyword">false</span>);</div><div class="line">    editor.commit();</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"保存成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    SharedPreferences sp = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE);</div><div class="line">    String name = sp.getString(<span class="string">"name"</span>, <span class="string">"null"</span>);</div><div class="line">    <span class="keyword">int</span> age = sp.getInt(<span class="string">"age"</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">boolean</span> married = sp.getBoolean(<span class="string">"married"</span>, <span class="keyword">false</span>);</div><div class="line">    Log.d(TAG, name);</div><div class="line">    Log.d(TAG, age + <span class="string">""</span>);</div><div class="line">    Log.d(TAG, married + <span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-文件存储"><a href="#2-文件存储" class="headerlink" title="2. 文件存储"></a>2. 文件存储</h2><p>文件存储分为<strong>内存储（Internal）</strong> 和 <strong>外存储（External）</strong>，内存储指的是将文件存储在系统内存中，而外存储指的是将文件存储在 SD 卡中，文件存储采用流的方式。</p>
<h3 id="内存储"><a href="#内存储" class="headerlink" title="内存储"></a>内存储</h3><p><strong>特点：</strong></p>
<ul>
<li>不需要声明权限</li>
<li>只能在 APP 内部访问</li>
<li>APP 被卸载，文件被移除</li>
</ul>
<p>内存储保存文件，默认保存在 <code>/data/data/&lt;packagename&gt;/files</code>目录下，使用 <code>openFileOutput()</code> 方法创建一个文件，并返回一个 FileOutputStream 对象，对文件进行数据存储操作</p>
<p><strong>保存文件到内部存储空间</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">(String inputText)</span> </span>&#123;</div><div class="line">    FileOutputStream out;</div><div class="line">    BufferedWriter writer = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// openFileOutput() 第一个参数为文件名，第二个参数指定操作文件的类型</span></div><div class="line">        out = openFileOutput(<span class="string">"data"</span>, Context.MODE_PRIVATE);</div><div class="line">        writer = <span class="keyword">new</span> BufferedWriter(newOutputStreamWriter(out));</div><div class="line">        writer.write(inputText);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</div><div class="line">                writer.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>从内部存储空间读取文件</strong></p>
<p>读取数据依据 <code>openFileInput()</code> 方法，返回一个 FileInputStream 对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line">    FileInputStream in;</div><div class="line">    BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        in = openFileInput(<span class="string">"data"</span>);</div><div class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">        String line = <span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            content.append(line);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                reader.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> content.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="外存储"><a href="#外存储" class="headerlink" title="外存储"></a>外存储</h3><p><strong>特点：</strong></p>
<ul>
<li>所有 APP 都可以访问</li>
<li>需要声明权限</li>
</ul>
<p><strong>设置权限</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>保存文件到外部存储空间</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2External</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    String inputText = medit.getText().toString();</div><div class="line">    FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">    BufferedWriter writer = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        File dir = getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);</div><div class="line">        File file = <span class="keyword">new</span> File(dir,<span class="string">"data.txt"</span>);</div><div class="line">        out=<span class="keyword">new</span> FileOutputStream(file);</div><div class="line">        writer=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</div><div class="line">        writer.write(inputText);</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"保存至SD卡成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                writer.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>从外部存储空间读取文件</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read4External</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    FileInputStream in = <span class="keyword">null</span>;</div><div class="line">    BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        File dir = getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);</div><div class="line">        File file=<span class="keyword">new</span> File(dir,<span class="string">"data.txt"</span>);</div><div class="line">        in=<span class="keyword">new</span> FileInputStream(file);</div><div class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">        String line = <span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            content.append(line);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String fileContent = content.toString();</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(fileContent)) &#123;</div><div class="line">            medit.setText(fileContent);</div><div class="line">            medit.setSelection(fileContent.length());</div><div class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"从SD卡读取成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                reader.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-SQLite-数据库存储"><a href="#3-SQLite-数据库存储" class="headerlink" title="3. SQLite 数据库存储"></a>3. SQLite 数据库存储</h2><p>SQLite 是嵌入到 Android 系统中的轻量型数据库，SQLite 提供了 <code>SQLiteOpenHelper</code> 帮助类来操作数据库的 <strong>创建</strong> 和 <strong>升级</strong> 等操作， <code>SQLiteOpenHelper</code> 是一个抽象类，提供了 <code>onCreate()</code> 和 <code>onUpgrade()</code> 两个方法，由于创建和升级数据库。</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a><strong>创建数据库</strong></h3><p>创建的数据库会保存在 <code>/data/data/&lt;package name&gt;/databases/</code> 目录下</p>
<p><strong>首先创建 <code>MyDatabaseHelper</code> 类继承  <code>SQLiteOpenHelper</code></strong> ，并在 <code>onCreate()</code> 方法中创建数表，这样在创建数库的时候数据表被一起创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">"create table Book ("</span></div><div class="line">            + <span class="string">"id integer primary key autoincrement,"</span></div><div class="line">            + <span class="string">"author text,"</span></div><div class="line">            + <span class="string">"price real,"</span></div><div class="line">            + <span class="string">"pages integer)"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDatabaseHelper</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, name, factory, version);</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase)</span> </span>&#123;</div><div class="line">        sqLiteDatabase.execSQL(CREATE_BOOK);</div><div class="line">        Toast.makeText(mContext, <span class="string">"创建成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>然后在 MainActivity 中的 Button 点击事件中调用 <code>getWritableDatabase()</code> 方法，来创建数据库</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">// 参数说明:</span></div><div class="line">        <span class="comment">// 1. Context</span></div><div class="line">        <span class="comment">// 2. 数据库文件名</span></div><div class="line">        <span class="comment">// 3. 查询时返回一个自定义的 Cursor，一般设置为 null</span></div><div class="line">        <span class="comment">// 4. 数据库版本号，版本号发生变化会回调 onUpgrade() 方法</span></div><div class="line">        dbHelper = <span class="keyword">new</span> MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">"BookStore.db"</span>, <span class="keyword">null</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDatabase</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a><strong>升级数据库</strong></h3><p>当数据版本发生变化时，<code>onUpgrade()</code> 方法会被回调，在 <code>onUpgrade()</code> 执行数据库更新的操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数据库版本发生变化</span></div><div class="line"><span class="keyword">new</span> MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">"BookStore.db"</span>, <span class="keyword">null</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<p><code>onUpgrade()</code> 中的逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_CATEGORY = <span class="string">"create table Catagory ("</span></div><div class="line">            + <span class="string">"id integer primary key autoincrement,"</span></div><div class="line">            + <span class="string">"category_name text,"</span></div><div class="line">            + <span class="string">"category_code integer)"</span>;</div><div class="line">            </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">    <span class="comment">// 注意switch语句没有break,保证数据库永远是最新的</span></div><div class="line">    <span class="keyword">switch</span> (oldVersion) &#123;</div><div class="line">    <span class="comment">// 添加新的表Catagory</span></div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            sqLiteDatabase.execSQL(CREATE_CATEGORY);</div><div class="line">    <span class="comment">// 给表 Book 添加 category_id 列</span></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            sqLiteDatabase.execSQL(<span class="string">"alter table Book add category_id integer"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="对数据表的-CRUD-操作"><a href="#对数据表的-CRUD-操作" class="headerlink" title="对数据表的 CRUD 操作"></a><strong>对数据表的 CRUD 操作</strong></h3><p><strong>C</strong> (Create)：添加<br><strong>R</strong> (Retrieve)：查询<br><strong>U</strong> (Update)：更新<br><strong>D</strong> (Delete)：删除</p>
<h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a><strong>添加数据</strong></h4><p><strong>1. 使用 Android 提供的辅助性方法实现</strong></p>
<p>调用 SQLiteOpenHelper 的 getReadableDatabase() 或 getWritableDatabase() 方法可以创建数据库，并且返回一个 SQLiteDatabase 对象，通过这个对象可以对数据进行 CRUD 操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    SQLiteDatabase database = dbHelper.getWritableDatabase();</div><div class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">    <span class="comment">// 添加第一条数据</span></div><div class="line">    values.put(<span class="string">"author"</span>, <span class="string">"Dan Brown"</span>);</div><div class="line">    values.put(<span class="string">"pages"</span>, <span class="number">454</span>);</div><div class="line">    values.put(<span class="string">"price"</span>, <span class="number">16.79</span>);</div><div class="line">    database.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</div><div class="line"></div><div class="line">    <span class="comment">// 添加第二条数据</span></div><div class="line">    values.put(<span class="string">"author"</span>, <span class="string">"June"</span>);</div><div class="line">    values.put(<span class="string">"pages"</span>, <span class="number">100</span>);</div><div class="line">    values.put(<span class="string">"price"</span>, <span class="number">13.33</span>);</div><div class="line">    database.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2. 使用SQL操作数据库</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">database.execSQL(<span class="string">"insert into Book (author,pages,price) values(?,?,?)"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"June"</span>,<span class="string">"459"</span>,<span class="string">"9.99"</span>&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a><strong>更新数据</strong></h4><p><strong>1. 使用 Android 提供的辅助性方法实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    SQLiteDatabase database = dbHelper.getWritableDatabase();</div><div class="line">    ContentValues values=<span class="keyword">new</span> ContentValues();</div><div class="line">    values.put(<span class="string">"price"</span>, <span class="number">10.99</span>);</div><div class="line">    database.update(<span class="string">"Book"</span>, values, <span class="string">"author=?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"Dan Brown"</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2. 使用SQL操作数据库</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">database.execSQL(<span class="string">"updata Book set price = ? where author = ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"5.99"</span>, <span class="string">"June"</span>&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><strong>删除数据</strong></h4><p><strong>1. 使用 Android 提供的辅助性方法实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    SQLiteDatabase database = dbHelper.getWritableDatabase();</div><div class="line">    database.delete(<span class="string">"Book"</span>, <span class="string">"author=?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"Dan Brown"</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2. 使用SQL操作数据库</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">database.execSQL(<span class="string">"delete from Book where pages &gt; ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"300"</span>&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a><strong>查询数据</strong></h4><p><strong>1. 使用 Android 提供的辅助性方法实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    SQLiteDatabase database = dbHelper.getWritableDatabase();</div><div class="line">    <span class="comment">// 查询所有</span></div><div class="line">    Cursor cursor = database.query(<span class="string">"Book"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">while</span> (cursor.moveToNext())&#123;</div><div class="line">        <span class="comment">// 遍历Cursor对象，取出数据并打印</span></div><div class="line">        String author = cursor.getString(cursor.getColumnIndex(<span class="string">"author"</span>));</div><div class="line">        <span class="keyword">int</span> pages = cursor.getInt(cursor.getColumnIndex(<span class="string">"pages"</span>));</div><div class="line">        <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">"price"</span>));</div><div class="line"></div><div class="line">        Log.d(TAG, author);</div><div class="line">        Log.d(TAG, pages + <span class="string">""</span>);</div><div class="line">        Log.d(TAG, price + <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    cursor.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2. 使用SQL操作数据库</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cursor cursor = database.rawQuery(<span class="string">"select * from Book"</span>, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a><strong>事务</strong></h3><p><strong>特点：</strong>保证某一系列操作的操作要么全部完成，要么一个都不会完成。</p>
<p>应用事务替换数据库所有数据，中途模拟出现异常，则替换不能执行，注释异常之后，替换完成执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    database = dbHelper.getWritableDatabase();</div><div class="line">    database.beginTransaction();<span class="comment">// 开启事务</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        database.delete(<span class="string">"Book"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">// 模拟出现异常</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 写入新的数据</span></div><div class="line">        database.execSQL(<span class="string">"insert into Book (author,pages,price) values(?,?,?)"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"June"</span>, <span class="string">"1000"</span>, <span class="string">"25.99"</span>&#125;);</div><div class="line">        database.setTransactionSuccessful();<span class="comment">// 事务执行成功</span></div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        database.endTransaction();<span class="comment">// 结束事务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-数据持久化&quot;&gt;&lt;a href=&quot;#Android-数据持久化&quot; class=&quot;headerlink&quot; title=&quot;Android 数据持久化&quot;&gt;&lt;/a&gt;Android 数据持久化&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： Android基础&lt;/p&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/Android%206.0%20%E4%B9%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7/"/>
    <id>http://yoursite.com/2017/05/19/Android 6.0 之动态权限申请/</id>
    <published>2017-05-19T12:05:16.533Z</published>
    <updated>2017-05-19T12:04:23.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-6-0-之动态权限申请"><a href="#Android-6-0-之动态权限申请" class="headerlink" title="Android 6.0 之动态权限申请"></a>Android 6.0 之动态权限申请</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p>我们都知道 Android 中的权限在 AndroidManifest.xml 文件中配置，对于 Android 6.0 之前的 API，开发者只能将应用中可能会使用到的权限全部配置在 AndroidManifest.xml 中，然后用户在安装应用时，会有权限的提示，但是如果这个应用必须安装，并且它申请了涉及用户隐私和安全的危险权限，这样用户只能选择默默承受，但是对于 Android 6.0 及其之后的 API，开发者可以将危险权限采取动态申请的方式来配置，这样做的好处为，用户在进行某个涉及隐私或安全的操作时，系统会弹出提示框，让用户自己选择是否要申请该权限，这样便很好的控制了应用程序的安全性 。</p>
<p><strong>具体操作如下：</strong></p>
<p><strong>1.</strong> 首先还是在 AndroidMnifest.xml 文件中配置所需权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CALL_PHONE"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里我们使用打电话的权限，它属于危险权限</p>
<p><strong>2.</strong> 然后在 MainActivity.java 文件中添加动态申请权限的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCall</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, </div><div class="line">            Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,<span class="keyword">new</span> String[]&#123;Manifest.permission.CALL_PHONE&#125;,<span class="number">1</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        call();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"tel:10086"</span>));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                call();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"权限被拒绝"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>分析上面代码：</strong></p>
<ul>
<li><p>第一步判断用户是否已经授权了权限，通过 <code>ContextCompat.checkSelfPermission()</code> 方法。</p>
<blockquote>
<p><code>checkSelfPermission()</code> 传两个参数<br> 第一是 Contenxt<br> 第二是 具体的权限名</p>
</blockquote>
</li>
<li><p>将返回值和 <code>PackageManager.PERMISSION_GRANTED</code> 比较，相等说明用户已经授权，直接执行 <code>call()</code> 方法即可，不等则需要向用户申请授权，通过 <code>ActivityCompat.requestPermissions()</code> 方法动态申请权限</p>
<blockquote>
<p><code>requestPermissions()</code> 传三个参数<br> 第一是 Activity 的实例<br> 第二是 一个 String[]<br> 第三是 请求码（只要是唯一的值即可）</p>
</blockquote>
</li>
<li><p>调用 <code>requestPermissions()</code> 后，系统会弹出一个申请权限的对话框，用户具体的选择会在 <code>onRequestPermissionsResult()</code> 方法中来处理，授权结果会封装在 <code>grantResults</code> 参数中，只需判断授权结果即可，用户同意直接调用 <code>call()</code> 方法，否则弹出提示框 。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-6-0-之动态权限申请&quot;&gt;&lt;a href=&quot;#Android-6-0-之动态权限申请&quot; class=&quot;headerlink&quot; title=&quot;Android 6.0 之动态权限申请&quot;&gt;&lt;/a&gt;Android 6.0 之动态权限申请&lt;/h1&gt;&lt;p&gt;标签
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/ContentProvider%20%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/19/ContentProvider 总结/</id>
    <published>2017-05-19T12:05:16.529Z</published>
    <updated>2017-05-19T12:04:15.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ContentProvider-总结"><a href="#ContentProvider-总结" class="headerlink" title="ContentProvider 总结"></a>ContentProvider 总结</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p><img src="https://raw.githubusercontent.com/HanderUp/SaveImg/master/ContentProvider_update.png" alt="ConentProvider原理图"></p>
<p>上图为 ContentProvider 的具体实现过程，Other App1 和 Other App2 分别提供了 ContentProvider 来向外界暴露数据，方便其他应用程序来访问。</p>
<p>对于不同的 ContentProvider 是由 ContentResolver 来进行管理的，其中 ContentResolver 中的 CRUD 方法对应不同 ContentProvider 中的 CRUD 方法，他们之间通过 URI 来进行消息的传递，ContentResolver 和 ContentProvider 之间的关系为，ContentProvider 只是提供数据的，而 ContentResolver 是将从 ContentProvider 中操作的结果返回给需要数据的应用程序。</p>
<p>##<strong>具体过程如下：</strong></p>
<p><strong>1.</strong> 以查询数据为例，在 MainActivity.java 中添加如下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"><span class="comment">// 此处URI与提供数据应用程序的&lt;provider&gt;属性 android:authorities 要一致</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URI = <span class="string">"content://com.example.sqlitetest.provider/book"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 查询数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryData</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Uri uri = Uri.parse(URI);</div><div class="line">    Cursor cursor = getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">            String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">            String author = cursor.getString(cursor.getColumnIndex(<span class="string">"author"</span>));</div><div class="line">            <span class="keyword">int</span> pages = cursor.getInt(cursor.getColumnIndex(<span class="string">"pages"</span>));</div><div class="line">            <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">"price"</span>));</div><div class="line"></div><div class="line">            Log.d(TAG, name);</div><div class="line">            Log.d(TAG, author);</div><div class="line">            Log.d(TAG, pages + <span class="string">""</span>);</div><div class="line">            Log.d(TAG, price + <span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2.</strong> 创建 DabaseProvider.java 继承 ContentProvider，并重写查询方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_DIR = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_ITEM = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CATEGORY_DIR = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CATEGORY_ITEM = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.example.sqlitetest.provider"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UriMatcher uriMatcher;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        uriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div><div class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, BOOK_DIR);</div><div class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"book/#"</span>, BOOK_ITEM);</div><div class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"category"</span>, CATEGORY_DIR);</div><div class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"catagory/#"</span>, CATEGORY_ITEM);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        dbHelper = <span class="keyword">new</span> MyDatabaseHelper(getContext(), <span class="string">"BookStore.db"</span>, <span class="keyword">null</span>, <span class="number">2</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)</span> </span>&#123;</div><div class="line">        <span class="comment">// 查询数据</span></div><div class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</div><div class="line">        Cursor cursor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri)) &#123;</div><div class="line">            <span class="keyword">case</span> BOOK_DIR:</div><div class="line">                cursor = db.query(<span class="string">"Book"</span>, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BOOK_ITEM:</div><div class="line">                String bookId = uri.getPathSegments().get(<span class="number">1</span>);</div><div class="line">                cursor = db.query(<span class="string">"Book"</span>, projection, <span class="string">"id = ?"</span>, <span class="keyword">new</span> String[]&#123;bookId&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CATEGORY_DIR:</div><div class="line">                cursor = db.query(<span class="string">"Category"</span>, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CATEGORY_ITEM:</div><div class="line">                String categoryId = uri.getPathSegments().get(<span class="number">1</span>);</div><div class="line">                cursor = db.query(<span class="string">"Category"</span>, projection, <span class="string">"id = ?"</span>, <span class="keyword">new</span> String[]&#123;categoryId&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cursor;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>3.</strong> 最后在 AndroidMnifest.xml 中设置 <code>&lt;provider&gt;</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.example.sqlitetest.DatabaseProvider"</span></div><div class="line">    <span class="attr">android:authorities</span>=<span class="string">"com.example.sqlitetest.provider"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ContentProvider-总结&quot;&gt;&lt;a href=&quot;#ContentProvider-总结&quot; class=&quot;headerlink&quot; title=&quot;ContentProvider 总结&quot;&gt;&lt;/a&gt;ContentProvider 总结&lt;/h1&gt;&lt;p&gt;标签（空格分
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/Android%20%E4%B8%AD%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/05/19/Android 中的布局/</id>
    <published>2017-05-19T12:05:16.524Z</published>
    <updated>2017-05-19T12:04:06.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-中的布局"><a href="#Android-中的布局" class="headerlink" title="Android 中的布局"></a>Android 中的布局</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p>Android 中的布局由常用的频率排序，如下表<br>| 布局方式 | 使用频率等级 | 特点 |<br>| :—-: | :—-: | :—-: |<br>|LinearLayout(线性布局)|5| 顺序排列，纵横两个方向，实现简单，多屏适配|<br>|RelativeLayout(相对布局)|5| 位置相对，对齐方式丰富，可以重叠，嵌套少，多屏适配|<br>|FrameLayout(帧布局)|3|可以重叠，对齐方式丰富，多屏适配|<br>|TableLayout(表格布局)|2|多行多列，规则布局，简单的多屏适配|<br>|GridLayout(网格布局)|1|多行多列，不规则布局，可跨行列，多屏适配，SDK4.0出现|<br>|AbsoluteLayout(绝对布局)|0|绝对坐标，不利于多屏适配|</p>
<p>由于 <code>RelativeLayout</code> 和 <code>FrameLayout</code> 没有 <code>layout_weight</code> 这个属性，因此 Android 团队提供了<strong>百分比布局</strong>，百分比布局对 <code>RelativeLayout</code> 和 <code>FrameLayout</code> 进行了功能的扩展。提供了 <code>PercentRelativeLayout</code> 和 <code>PercentFrameLayout</code> 两种布局</p>
<p><strong>使用百分比布局注意事项：</strong><br>在项目 <code>build.gradle</code> 中添加以下依赖包<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span>&#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:percent:25.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="一、-LinearLayout-中注意的事项："><a href="#一、-LinearLayout-中注意的事项：" class="headerlink" title="一、 LinearLayout 中注意的事项："></a>一、 LinearLayout 中注意的事项：</h2><ol>
<li>LinearLayout 中的属性 <code>Layout_gravity</code> 和 <code>gravity</code>的区别： <code>Layout_gravity</code>：表示组件相对于父容器的位置 。<br><code>gravity</code>：表示组件内部内容相对于组件的位置 。</li>
<li>当属性 <code>orientation=&quot;horizontal&quot;</code> 时，只有垂直方向上的属性有效，同样的 <code>orientation=&quot;vertical&quot;</code> 时，只有水平方向上的属性有效 。</li>
</ol>
<h2 id="二、-RelativeLayout-中的属性"><a href="#二、-RelativeLayout-中的属性" class="headerlink" title="二、 RelativeLayout 中的属性"></a>二、 RelativeLayout 中的属性</h2><p><strong>第一类：属性值为 <code>true</code> 或 <code>false</code></strong><br>|属性|说明|<br>|:—-:|:—-:|<br>|android:layout_centerHrizontal|水平居中|<br>|android:layout_centerVertical|垂直居中|<br>|android:layout_centerInparent|相对父元素完全居中|<br>|android:layout_alignParentTop|贴紧父元素的上边缘|<br>|android:layout_alignParentBottom|贴紧父元素的下边缘|<br>|android:layout_alignParentLeft|贴紧父元素的左边缘|<br>|android:layout_alignParentRight|贴紧父元素的右边缘|<br><strong>第二类：属性值必须为id的引用名 “@id/id-name”</strong><br>|属性|说明|<br>|:—-:|:—-:|<br>|android:layout_above|在某元素的上方|<br>|android:layout_below|在某元素的下方|<br>|android:layout_toLeftOf|在某元素的左方|<br>|android:layout_toRightOf|在某元素的右方|<br>|android:layout_alignTop|本元素的上边缘和某元素的上边缘对齐|<br>|android:layout_alignBottom|本元素的下边缘和某元素的下边缘对齐|<br>|android:layout_alignLeft|本元素的左边缘和某元素的左边缘对齐|<br>|android:layout_alignRight|本元素的右边缘和某元素的右边缘对齐|<br><strong>第三类：属性值为具体的像素值，如 30 dip，40 px</strong><br>|属性|说明|<br>|:—-:|:—-:|<br>|android:layout_marginTop|距离某元素上边缘的距离|<br>|android:layout_marginBottom|距离某元素下边缘的距离|<br>|android:layout_marginLeft|距离某元素左边缘的距离|<br>|android:layout_marginRight|距离某元素右边缘的距离|</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-中的布局&quot;&gt;&lt;a href=&quot;#Android-中的布局&quot; class=&quot;headerlink&quot; title=&quot;Android 中的布局&quot;&gt;&lt;/a&gt;Android 中的布局&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： Android基础&lt;/p&gt;
&lt;hr&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/19/Intent%20%E5%88%9D%E7%BA%A7/"/>
    <id>http://yoursite.com/2017/05/19/Intent 初级/</id>
    <published>2017-05-19T09:49:05.263Z</published>
    <updated>2017-05-19T09:48:59.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intent-初级"><a href="#Intent-初级" class="headerlink" title="Intent 初级"></a>Intent 初级</h1><p>标签（空格分隔）： Android基础</p>
<hr>
<p><strong>Intent</strong> 作为 <code>Android</code> 中意图，可以通过 <code>action</code> 和 <code>category</code> 两个主要的标签指定想要启动的组件。<strong>Intent</strong> 分为 <strong>显式</strong> 和 <strong>隐式</strong> 。</p>
<h2 id="1-显式-Intent-启动另一个-Activity-，并传递数据"><a href="#1-显式-Intent-启动另一个-Activity-，并传递数据" class="headerlink" title="1. 显式 Intent 启动另一个 Activity ，并传递数据"></a>1. 显式 Intent 启动另一个 Activity ，并传递数据</h2><p>在程序代码中注册，并且只能启动本应用中的其他组件，不能跨应用启动组件。</p>
<p>可以通过 Intent 传递参数给另一个 Activity<br>使用 Intent 启动一个 SendActivity :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EditText meditText;</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXTRA_MESSAGE = <span class="string">"com.example.firstapp.MESSAGE"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartSendActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SendActivity.class);</div><div class="line">    String message = meditText.getText().toString();</div><div class="line">    intent.putExtra(EXTRA_MESSAGE,message); </div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用 Intent 接收传递的参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TextView mtextView;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent intent = getIntent();</div><div class="line">    String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);</div><div class="line">    mtextView.setText(message);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-隐式-Intent"><a href="#2-隐式-Intent" class="headerlink" title="2. 隐式 Intent"></a>2. 隐式 Intent</h2><p>在 Android 中隐式启动 Intent 的方式最常见，因为隐式 Intent 可以跨应用启动不同组件，包括系统提供的组件和自己编写的应用中的组件都可以被启动。</p>
<p><strong>隐式 Intent 可以在 AndroidManifest.xml 和 代码 中注册 主要定义 <code>action</code> 和 <code>category</code> 标签</strong><br><strong>1. 使用系统提供的 Intent</strong><br>常用的系统 <strong>Intent <code>action</code>：</strong><br><code>action</code>代表已经定义的动作，通过 setAction()方法或在 AndroidManifest.xml 中设置</p>
<table>
<thead>
<tr>
<th style="text-align:center">系统 Intent</th>
<th style="text-align:center">对应字符串</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ACTION_VIEW</td>
<td style="text-align:center">android.intent.action.VIEW</td>
<td style="text-align:center">显示指定数据/播放音乐</td>
</tr>
<tr>
<td style="text-align:center">ACTION_DIAL</td>
<td style="text-align:center">android.intent.action.DIAL</td>
<td style="text-align:center">打开拨号面板</td>
</tr>
<tr>
<td style="text-align:center">ACTION_CALL</td>
<td style="text-align:center">android.intent.action.CALL</td>
<td style="text-align:center">向指定号码打电话</td>
</tr>
<tr>
<td style="text-align:center">ACTION_MAIN</td>
<td style="text-align:center">android.intent.action.MAIN</td>
<td style="text-align:center">应用程序入口</td>
</tr>
<tr>
<td style="text-align:center">ACTION_EDIT</td>
<td style="text-align:center">android.intent.action.EDIT</td>
<td style="text-align:center">编辑指定数据</td>
</tr>
<tr>
<td style="text-align:center">ACTION_SENDTO</td>
<td style="text-align:center">android.intent.action.SENDTO</td>
<td style="text-align:center">发送消息</td>
</tr>
<tr>
<td style="text-align:center">ACTION_DELETE</td>
<td style="text-align:center">android.intent.action.DELETE</td>
<td style="text-align:center">删除数据/卸载应用</td>
</tr>
<tr>
<td style="text-align:center">ACTION_INSERT</td>
<td style="text-align:center">android.intent.action.INSERT</td>
<td style="text-align:center">插入数据/安装应用</td>
</tr>
</tbody>
</table>
<p><strong>同时还需要设置 <code>category</code> 标签：</strong><br><code>category</code> 标签用于指定 action 被执行的环境，通过 addCategory()方法或在 AndroidManifest.xml 中设置</p>
<p>具体使用如下：<br><strong>1. 在 AndroidManifest.xml 中注册</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=".SendActivity"</div><div class="line">    android:label="SendActivity"&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="android.intent.action.VIEW"/&gt;             &lt;category android:name="android.intent.category.DEFAULT"/&gt;</div><div class="line">        &lt;data android:scheme="http"/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<p><strong>2. 在代码中注册</strong><br>启动拨号面板示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callPhone</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL);</div><div class="line">    intent.setData(Uri.parse(<span class="string">"tel:13369100203"</span>));</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-使用-Intent-返回数据给上一个-Activity"><a href="#3-使用-Intent-返回数据给上一个-Activity" class="headerlink" title="3. 使用 Intent 返回数据给上一个 Activity"></a>3. 使用 Intent 返回数据给上一个 Activity</h2><p>首先在 FirstActivity 中使用 startActivityForResult() 方法启动 SendActivity , 代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusice</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.intenttest.ACTION_START"</span>);</div><div class="line">    startActivityForResult(intent, <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在 SendActivity 中设置按钮的点击事件，使用 Intent 传递数据 ， 也可以重写返回键的 onBackPressed() 方法 ， 代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">    intent.putExtra(<span class="string">"data_return"</span>, <span class="string">"I'm layoutActivity"</span>);</div><div class="line">    setResult(RESULT_OK, intent);</div><div class="line">    finish();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 FirstActivity 中重写 onActivityResult() 方法，用来接收 SendActivity 传递的数据，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">                String returnData = data.getStringExtra(<span class="string">"data_return"</span>);</div><div class="line">                Toast.makeText(<span class="keyword">this</span>, returnData, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Intent-初级&quot;&gt;&lt;a href=&quot;#Intent-初级&quot; class=&quot;headerlink&quot; title=&quot;Intent 初级&quot;&gt;&lt;/a&gt;Intent 初级&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： Android基础&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;In
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Studio 中 build.gradle文件详解</title>
    <link href="http://yoursite.com/2017/03/11/Android%20Studio%20%E4%B8%AD%20build.gradle%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/03/11/Android Studio 中 build.gradle文件详解/</id>
    <published>2017-03-11T10:37:12.000Z</published>
    <updated>2017-05-19T12:03:00.410Z</updated>
    
    <content type="html"><![CDATA[<p>Android 项目中有两个 <code>build.gradle</code> 文件， 一个是在最外层目录下的， 一个是在 <code>app</code> 目录下的。 这两个文件对构建 Android Studio 项目都起了至关重要的作用，下面我们对这两个文件分别进行分析。</p>
<h2 id="一、先来分析最外层目录下的-build-gradle-文件，-代码如下所示："><a href="#一、先来分析最外层目录下的-build-gradle-文件，-代码如下所示：" class="headerlink" title="一、先来分析最外层目录下的 build.gradle 文件， 代码如下所示："></a><strong>一、先来分析最外层目录下的 <code>build.gradle</code> 文件， 代码如下所示：</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.3.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该文件中包含两个 <code>repositories</code> 两个闭包， 并且都声明了 <code>jcenter()</code> 这行配置， <code>jcenter</code> 是一个代码托管仓库， 通过声明了这行配置之后， 我们就可以在项目中轻松引用任何 <code>jcenter</code> 上的开源项目了。 </p>
<p>其次， <code>dependencies</code> 闭包中使用 <code>classpath</code> 声明了一个 <code>Gradle</code> 插件， <code>Gradle</code> 插件并不是专门为构建 Android 项目而开发的， Java，C++ 等很多种项目都可以使用 <code>Gradle</code> 来构建。因此我们使用它来构建 Android 项目，则需要声明 <code>com.android.tools.build:gradle:2.3.0</code> 这个插件。 <code>2.3.0</code> 为 <code>Gradle</code> 插件的版本号。</p>
<h2 id="二、下面我们再来看一下-app-目录下的-build-gradle-文件，-代码如下所示："><a href="#二、下面我们再来看一下-app-目录下的-build-gradle-文件，-代码如下所示：" class="headerlink" title="二、下面我们再来看一下 app 目录下的 build.gradle 文件， 代码如下所示："></a><strong>二、下面我们再来看一下 app 目录下的 <code>build.gradle</code> 文件， 代码如下所示：</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">23</span></div><div class="line">    buildToolsVersion <span class="string">'25.0.0'</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.administrator.myfirstapp"</span></div><div class="line">        minSdkVersion <span class="number">19</span></div><div class="line">        targetSdkVersion <span class="number">23</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.4.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support.constraint:constraint-layout:1.0.0-beta4'</span></div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-apply-plugin：应用插件"><a href="#1-apply-plugin：应用插件" class="headerlink" title="1. apply plugin：应用插件"></a><strong>1. apply plugin：应用插件</strong></h3><p>一般有两种值可选：</p>
<blockquote>
<p><code>com.android.application</code> ：表示这是一个应用程序模块<br><code>com.android.library</code> ：表示这是一个库模块</p>
</blockquote>
<p>应用程序模块和库模块的最大区别在于，一个是可以直接运行，一个只能作为代码库依附于别的应用程序模块运行。</p>
<h3 id="2-android-闭包：用来配置项目构建的各种属性"><a href="#2-android-闭包：用来配置项目构建的各种属性" class="headerlink" title="2. android 闭包：用来配置项目构建的各种属性"></a><strong>2. android 闭包：用来配置项目构建的各种属性</strong></h3><blockquote>
<p><code>compileSdkVersion</code> ：用于指定项目的编译版本<br><code>buildToolsVersion</code> ：用于指定项目构建工具的版本</p>
</blockquote>
<h3 id="2-1-defaultConfig-子闭包：对项目的更多细节进行配置"><a href="#2-1-defaultConfig-子闭包：对项目的更多细节进行配置" class="headerlink" title="2.1 defaultConfig 子闭包：对项目的更多细节进行配置"></a><strong>2.1 defaultConfig 子闭包：对项目的更多细节进行配置</strong></h3><blockquote>
<p><code>applicationId</code>：用于指定项目的包名<br><code>minSdkVersion</code>：用于指定项目最低兼容的 Android 系统版本<br><code>targetSdkVersion</code>：指定的值表示你在该版本上已经做过了充分的测试，系统将会为你的应用程序启用一些最新的功能和特征<br><code>versionCode</code>：用于指定项目的版本号<br><code>versionName</code>：用于指定项目的版本名</p>
</blockquote>
<h3 id="2-2-buildTypes-子闭包：用于指定生成安装文件的相关配置"><a href="#2-2-buildTypes-子闭包：用于指定生成安装文件的相关配置" class="headerlink" title="2.2 buildTypes 子闭包：用于指定生成安装文件的相关配置"></a><strong>2.2 buildTypes 子闭包：用于指定生成安装文件的相关配置</strong></h3><p>通常只会有两个子闭包（<code>debug</code>闭包是可以忽略不写的，因此我们看到上面的代码中就只有一个 <code>release</code> 闭包）。</p>
<p><code>debug</code>：测试版安装文件的配置<br><code>release</code>：正式版安装文件的配置爱</p>
<blockquote>
<p><code>minifyEnabled</code>：用于指定是否对项目的代码进行混淆， <code>true</code>  表示混淆， <code>false</code> 表示不混淆<br><code>proguardFiles</code>：用于指定混淆时使用的规则文件</p>
</blockquote>
<p><strong>proguardFiles：中的文件</strong><br><code>proguad-android.txt</code>：是在 Android SDK 目录下的，里面是所有项目通用的混淆规则<br><code>proguard-rules.pro</code>：是在当前项目的根目录下的，里面可以编写当前项目特有的混淆规则</p>
<h3 id="3-dependencies-闭包：指定当前项目所有的依赖关系"><a href="#3-dependencies-闭包：指定当前项目所有的依赖关系" class="headerlink" title="3. dependencies 闭包：指定当前项目所有的依赖关系"></a><strong>3. dependencies 闭包：指定当前项目所有的依赖关系</strong></h3><p>Android Studio 项目一共有3中依赖关系：<code>本地依赖</code> <code>库依赖</code> <code>远程依赖</code><br><code>本地依赖</code>：可以对本地的 <code>Jar</code> 包或目录添加依赖关系<br><code>库依赖</code>：可以对项目中的库模块添加依赖关系<br><code>远程依赖</code>：可以对 <code>jcenter</code> 库上的开源项目添加依赖关系</p>
<blockquote>
<p><code>compile fileTree</code>：本地依赖声明<br><code>compile</code>：远程依赖声明<br><code>compile project</code>：库依赖</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 项目中有两个 &lt;code&gt;build.gradle&lt;/code&gt; 文件， 一个是在最外层目录下的， 一个是在 &lt;code&gt;app&lt;/code&gt; 目录下的。 这两个文件对构建 Android Studio 项目都起了至关重要的作用，下面我们对这两个文件分别进行
    
    </summary>
    
      <category term="gradle" scheme="http://yoursite.com/categories/gradle/"/>
    
    
      <category term="Android基础" scheme="http://yoursite.com/tags/Android%E5%9F%BA%E7%A1%80/"/>
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
</feed>
